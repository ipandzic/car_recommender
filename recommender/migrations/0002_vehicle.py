# Generated by Django 5.0.6 on 2024-05-12 14:32

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("recommender", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("make", models.CharField(blank=True, max_length=100, null=True)),
                ("model", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "annual_petroleum_consumption_for_fuel_type1",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "annual_petroleum_consumption_for_fuel_type2",
                    models.FloatField(blank=True, null=True),
                ),
                ("time_to_charge_at_120v", models.IntegerField(blank=True, null=True)),
                ("time_to_charge_at_240v", models.IntegerField(blank=True, null=True)),
                ("city_mpg_for_fuel_type1", models.IntegerField(blank=True, null=True)),
                (
                    "unrounded_city_mpg_for_fuel_type1",
                    models.FloatField(blank=True, null=True),
                ),
                ("city_mpg_for_fuel_type2", models.IntegerField(blank=True, null=True)),
                (
                    "unrounded_city_mpg_for_fuel_type2",
                    models.FloatField(blank=True, null=True),
                ),
                ("city_gasoline_consumption", models.FloatField(blank=True, null=True)),
                (
                    "city_electricity_consumption",
                    models.FloatField(blank=True, null=True),
                ),
                ("epa_city_utility_factor", models.FloatField(blank=True, null=True)),
                ("co2_fuel_type1", models.IntegerField(blank=True, null=True)),
                ("co2_fuel_type2", models.IntegerField(blank=True, null=True)),
                (
                    "co2_tailpipe_for_fuel_type2",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "co2_tailpipe_for_fuel_type1",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "combined_mpg_for_fuel_type1",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "unrounded_combined_mpg_for_fuel_type1",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "combined_mpg_for_fuel_type2",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "unrounded_combined_mpg_for_fuel_type2",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "combined_electricity_consumption",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "combined_gasoline_consumption",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "epa_combined_utility_factor",
                    models.FloatField(blank=True, null=True),
                ),
                ("cylinders", models.IntegerField(blank=True, null=True)),
                ("engine_displacement", models.FloatField(blank=True, null=True)),
                ("drive", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "epa_model_type_index",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "engine_descriptor",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("epa_fuel_economy_score", models.IntegerField(blank=True, null=True)),
                (
                    "annual_fuel_cost_for_fuel_type1",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "annual_fuel_cost_for_fuel_type2",
                    models.IntegerField(blank=True, null=True),
                ),
                ("fuel_type", models.CharField(blank=True, max_length=100, null=True)),
                ("fuel_type1", models.CharField(blank=True, max_length=100, null=True)),
                ("ghg_score", models.IntegerField(blank=True, null=True)),
                (
                    "ghg_score_alternative_fuel",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "highway_mpg_for_fuel_type1",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "unrounded_highway_mpg_for_fuel_type1",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "highway_mpg_for_fuel_type2",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "unrounded_highway_mpg_for_fuel_type2",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "highway_gasoline_consumption",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "highway_electricity_consumption",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "epa_highway_utility_factor",
                    models.FloatField(blank=True, null=True),
                ),
                ("hatchback_luggage_volume", models.FloatField(blank=True, null=True)),
                (
                    "hatchback_passenger_volume",
                    models.FloatField(blank=True, null=True),
                ),
                ("two_door_luggage_volume", models.FloatField(blank=True, null=True)),
                ("four_door_luggage_volume", models.FloatField(blank=True, null=True)),
                ("mpg_data", models.CharField(blank=True, max_length=1, null=True)),
                ("phev_blended", models.BooleanField(blank=True, null=True)),
                (
                    "two_door_passenger_volume",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "four_door_passenger_volume",
                    models.IntegerField(blank=True, null=True),
                ),
                ("range_for_fuel_type1", models.FloatField(blank=True, null=True)),
                ("range_city_for_fuel_type1", models.FloatField(blank=True, null=True)),
                ("range_city_for_fuel_type2", models.FloatField(blank=True, null=True)),
                (
                    "range_highway_for_fuel_type1",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "range_highway_for_fuel_type2",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "transmission",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "unadjusted_city_mpg_for_fuel_type1",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "unadjusted_city_mpg_for_fuel_type2",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "unadjusted_highway_mpg_for_fuel_type1",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "unadjusted_highway_mpg_for_fuel_type2",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "vehicle_size_class",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("year", models.IntegerField(blank=True, null=True)),
                ("you_save_spend", models.IntegerField(blank=True, null=True)),
                ("guzzler", models.CharField(blank=True, max_length=1, null=True)),
                (
                    "transmission_descriptor",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("t_charger", models.CharField(blank=True, max_length=1, null=True)),
                ("s_charger", models.CharField(blank=True, max_length=1, null=True)),
                ("atv_type", models.CharField(blank=True, max_length=100, null=True)),
                ("fuel_type2", models.CharField(blank=True, max_length=100, null=True)),
                ("epa_range_for_fuel_type2", models.FloatField(blank=True, null=True)),
                (
                    "electric_motor",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("mfr_code", models.CharField(blank=True, max_length=100, null=True)),
                ("c240dscr", models.CharField(blank=True, max_length=100, null=True)),
                ("charge240b", models.FloatField(blank=True, null=True)),
                ("c240b_dscr", models.CharField(blank=True, max_length=100, null=True)),
                ("created_on", models.DateField(blank=True, null=True)),
                ("modified_on", models.DateField(blank=True, null=True)),
                ("start_stop", models.BooleanField(blank=True, null=True)),
                ("phev_city", models.IntegerField(blank=True, null=True)),
                ("phev_highway", models.IntegerField(blank=True, null=True)),
                ("phev_combined", models.IntegerField(blank=True, null=True)),
                ("base_model", models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
    ]
